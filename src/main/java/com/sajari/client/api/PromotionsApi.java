/*
 * Search.io API
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sajari.client.api;

import com.sajari.client.ApiCallback;
import com.sajari.client.ApiClient;
import com.sajari.client.ApiException;
import com.sajari.client.ApiResponse;
import com.sajari.client.Configuration;
import com.sajari.client.Pair;
import com.sajari.client.ProgressRequestBody;
import com.sajari.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sajari.client.model.Error;
import com.sajari.client.model.ListPromotionsResponse;
import com.sajari.client.model.Promotion;

import java.lang.reflect.Type;

public class PromotionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PromotionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PromotionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPromotion
     * @param collectionId The collection to create a promotion in, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotion The promotion to create. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPromotionCall(String collectionId, Promotion promotion, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promotion;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/promotions"
            .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (accountId != null) {
            localVarHeaderParams.put("Account-Id", localVarApiClient.parameterToString(accountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPromotionValidateBeforeCall(String collectionId, Promotion promotion, String accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling createPromotion(Async)");
        }
        
        // verify the required parameter 'promotion' is set
        if (promotion == null) {
            throw new ApiException("Missing the required parameter 'promotion' when calling createPromotion(Async)");
        }
        

        okhttp3.Call localVarCall = createPromotionCall(collectionId, promotion, accountId, _callback);
        return localVarCall;

    }

    /**
     * Create promotion
     * Create a new promotion in a collection.
     * @param collectionId The collection to create a promotion in, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotion The promotion to create. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @return Promotion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Promotion createPromotion(String collectionId, Promotion promotion, String accountId) throws ApiException {
        ApiResponse<Promotion> localVarResp = createPromotionWithHttpInfo(collectionId, promotion, accountId);
        return localVarResp.getData();
    }

    /**
     * Create promotion
     * Create a new promotion in a collection.
     * @param collectionId The collection to create a promotion in, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotion The promotion to create. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @return ApiResponse&lt;Promotion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Promotion> createPromotionWithHttpInfo(String collectionId, Promotion promotion, String accountId) throws ApiException {
        okhttp3.Call localVarCall = createPromotionValidateBeforeCall(collectionId, promotion, accountId, null);
        Type localVarReturnType = new TypeToken<Promotion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create promotion (asynchronously)
     * Create a new promotion in a collection.
     * @param collectionId The collection to create a promotion in, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotion The promotion to create. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPromotionAsync(String collectionId, Promotion promotion, String accountId, final ApiCallback<Promotion> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPromotionValidateBeforeCall(collectionId, promotion, accountId, _callback);
        Type localVarReturnType = new TypeToken<Promotion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePromotion
     * @param collectionId The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotionId The promotion to delete, e.g. &#x60;1234&#x60;. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the promotion was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePromotionCall(String collectionId, String promotionId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/promotions/{promotion_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()))
            .replaceAll("\\{" + "promotion_id" + "\\}", localVarApiClient.escapeString(promotionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (accountId != null) {
            localVarHeaderParams.put("Account-Id", localVarApiClient.parameterToString(accountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePromotionValidateBeforeCall(String collectionId, String promotionId, String accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling deletePromotion(Async)");
        }
        
        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling deletePromotion(Async)");
        }
        

        okhttp3.Call localVarCall = deletePromotionCall(collectionId, promotionId, accountId, _callback);
        return localVarCall;

    }

    /**
     * Delete promotion
     * Delete a promotion and all of its associated data.  &gt; Note: This operation cannot be reversed.
     * @param collectionId The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotionId The promotion to delete, e.g. &#x60;1234&#x60;. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the promotion was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object deletePromotion(String collectionId, String promotionId, String accountId) throws ApiException {
        ApiResponse<Object> localVarResp = deletePromotionWithHttpInfo(collectionId, promotionId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete promotion
     * Delete a promotion and all of its associated data.  &gt; Note: This operation cannot be reversed.
     * @param collectionId The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotionId The promotion to delete, e.g. &#x60;1234&#x60;. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the promotion was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deletePromotionWithHttpInfo(String collectionId, String promotionId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = deletePromotionValidateBeforeCall(collectionId, promotionId, accountId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete promotion (asynchronously)
     * Delete a promotion and all of its associated data.  &gt; Note: This operation cannot be reversed.
     * @param collectionId The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotionId The promotion to delete, e.g. &#x60;1234&#x60;. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the promotion was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePromotionAsync(String collectionId, String promotionId, String accountId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePromotionValidateBeforeCall(collectionId, promotionId, accountId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPromotion
     * @param collectionId The collection that owns the promotion, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotionId The promotion to retrieve, e.g. &#x60;1234&#x60;. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPromotionCall(String collectionId, String promotionId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/promotions/{promotion_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()))
            .replaceAll("\\{" + "promotion_id" + "\\}", localVarApiClient.escapeString(promotionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (accountId != null) {
            localVarHeaderParams.put("Account-Id", localVarApiClient.parameterToString(accountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPromotionValidateBeforeCall(String collectionId, String promotionId, String accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getPromotion(Async)");
        }
        
        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling getPromotion(Async)");
        }
        

        okhttp3.Call localVarCall = getPromotionCall(collectionId, promotionId, accountId, _callback);
        return localVarCall;

    }

    /**
     * Get promotion
     * Retrieve the details of a promotion.
     * @param collectionId The collection that owns the promotion, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotionId The promotion to retrieve, e.g. &#x60;1234&#x60;. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @return Promotion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Promotion getPromotion(String collectionId, String promotionId, String accountId) throws ApiException {
        ApiResponse<Promotion> localVarResp = getPromotionWithHttpInfo(collectionId, promotionId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get promotion
     * Retrieve the details of a promotion.
     * @param collectionId The collection that owns the promotion, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotionId The promotion to retrieve, e.g. &#x60;1234&#x60;. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @return ApiResponse&lt;Promotion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Promotion> getPromotionWithHttpInfo(String collectionId, String promotionId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getPromotionValidateBeforeCall(collectionId, promotionId, accountId, null);
        Type localVarReturnType = new TypeToken<Promotion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get promotion (asynchronously)
     * Retrieve the details of a promotion.
     * @param collectionId The collection that owns the promotion, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotionId The promotion to retrieve, e.g. &#x60;1234&#x60;. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPromotionAsync(String collectionId, String promotionId, String accountId, final ApiCallback<Promotion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPromotionValidateBeforeCall(collectionId, promotionId, accountId, _callback);
        Type localVarReturnType = new TypeToken<Promotion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPromotions
     * @param collectionId The collection that owns this set of promotions, e.g. &#x60;my-collection&#x60;. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param pageSize The maximum number of promotions to return. The service may return fewer than this value.  If unspecified, at most 50 promotions are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous [ListPromotions](/docs/api#operation/ListPromotions) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPromotions](/docs/api#operation/ListPromotions) must match the call that provided the page token. (optional)
     * @param view The amount of information to include in each retrieved promotion.   - PROMOTION_VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;FULL&#x60; view.  - BASIC: Include basic information including name, start time and end time, but not detailed information about the promotion effects.  - FULL: Returns all information about a promotion. This is the default value. (optional, default to PROMOTION_VIEW_UNSPECIFIED)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPromotionsCall(String collectionId, String accountId, Integer pageSize, String pageToken, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/promotions"
            .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (accountId != null) {
            localVarHeaderParams.put("Account-Id", localVarApiClient.parameterToString(accountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPromotionsValidateBeforeCall(String collectionId, String accountId, Integer pageSize, String pageToken, String view, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling listPromotions(Async)");
        }
        

        okhttp3.Call localVarCall = listPromotionsCall(collectionId, accountId, pageSize, pageToken, view, _callback);
        return localVarCall;

    }

    /**
     * List promotions
     * Retrieve a list of promotions in a collection.  Promotion pins, exclusions and filter boosts are not returned in this call.
     * @param collectionId The collection that owns this set of promotions, e.g. &#x60;my-collection&#x60;. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param pageSize The maximum number of promotions to return. The service may return fewer than this value.  If unspecified, at most 50 promotions are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous [ListPromotions](/docs/api#operation/ListPromotions) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPromotions](/docs/api#operation/ListPromotions) must match the call that provided the page token. (optional)
     * @param view The amount of information to include in each retrieved promotion.   - PROMOTION_VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;FULL&#x60; view.  - BASIC: Include basic information including name, start time and end time, but not detailed information about the promotion effects.  - FULL: Returns all information about a promotion. This is the default value. (optional, default to PROMOTION_VIEW_UNSPECIFIED)
     * @return ListPromotionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ListPromotionsResponse listPromotions(String collectionId, String accountId, Integer pageSize, String pageToken, String view) throws ApiException {
        ApiResponse<ListPromotionsResponse> localVarResp = listPromotionsWithHttpInfo(collectionId, accountId, pageSize, pageToken, view);
        return localVarResp.getData();
    }

    /**
     * List promotions
     * Retrieve a list of promotions in a collection.  Promotion pins, exclusions and filter boosts are not returned in this call.
     * @param collectionId The collection that owns this set of promotions, e.g. &#x60;my-collection&#x60;. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param pageSize The maximum number of promotions to return. The service may return fewer than this value.  If unspecified, at most 50 promotions are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous [ListPromotions](/docs/api#operation/ListPromotions) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPromotions](/docs/api#operation/ListPromotions) must match the call that provided the page token. (optional)
     * @param view The amount of information to include in each retrieved promotion.   - PROMOTION_VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;FULL&#x60; view.  - BASIC: Include basic information including name, start time and end time, but not detailed information about the promotion effects.  - FULL: Returns all information about a promotion. This is the default value. (optional, default to PROMOTION_VIEW_UNSPECIFIED)
     * @return ApiResponse&lt;ListPromotionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPromotionsResponse> listPromotionsWithHttpInfo(String collectionId, String accountId, Integer pageSize, String pageToken, String view) throws ApiException {
        okhttp3.Call localVarCall = listPromotionsValidateBeforeCall(collectionId, accountId, pageSize, pageToken, view, null);
        Type localVarReturnType = new TypeToken<ListPromotionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List promotions (asynchronously)
     * Retrieve a list of promotions in a collection.  Promotion pins, exclusions and filter boosts are not returned in this call.
     * @param collectionId The collection that owns this set of promotions, e.g. &#x60;my-collection&#x60;. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param pageSize The maximum number of promotions to return. The service may return fewer than this value.  If unspecified, at most 50 promotions are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous [ListPromotions](/docs/api#operation/ListPromotions) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPromotions](/docs/api#operation/ListPromotions) must match the call that provided the page token. (optional)
     * @param view The amount of information to include in each retrieved promotion.   - PROMOTION_VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;FULL&#x60; view.  - BASIC: Include basic information including name, start time and end time, but not detailed information about the promotion effects.  - FULL: Returns all information about a promotion. This is the default value. (optional, default to PROMOTION_VIEW_UNSPECIFIED)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPromotionsAsync(String collectionId, String accountId, Integer pageSize, String pageToken, String view, final ApiCallback<ListPromotionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPromotionsValidateBeforeCall(collectionId, accountId, pageSize, pageToken, view, _callback);
        Type localVarReturnType = new TypeToken<ListPromotionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePromotion
     * @param collectionId The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotionId The promotion to update, e.g. &#x60;1234&#x60;. (required)
     * @param updateMask The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;display_name&#x60;, &#x60;filter_boosts&#x60;.  For each field that you want to update, provide a corresponding value in the promotion object containing the new value. (required)
     * @param promotion Details of the promotion to update. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the promotion was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePromotionCall(String collectionId, String promotionId, String updateMask, Promotion promotion, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promotion;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/promotions/{promotion_id}"
            .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()))
            .replaceAll("\\{" + "promotion_id" + "\\}", localVarApiClient.escapeString(promotionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (updateMask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("update_mask", updateMask));
        }

        if (accountId != null) {
            localVarHeaderParams.put("Account-Id", localVarApiClient.parameterToString(accountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePromotionValidateBeforeCall(String collectionId, String promotionId, String updateMask, Promotion promotion, String accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling updatePromotion(Async)");
        }
        
        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling updatePromotion(Async)");
        }
        
        // verify the required parameter 'updateMask' is set
        if (updateMask == null) {
            throw new ApiException("Missing the required parameter 'updateMask' when calling updatePromotion(Async)");
        }
        
        // verify the required parameter 'promotion' is set
        if (promotion == null) {
            throw new ApiException("Missing the required parameter 'promotion' when calling updatePromotion(Async)");
        }
        

        okhttp3.Call localVarCall = updatePromotionCall(collectionId, promotionId, updateMask, promotion, accountId, _callback);
        return localVarCall;

    }

    /**
     * Update promotion
     * Update the details of a promotion.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;display_name&#x60; and &#x60;start_time&#x60; fields, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/promotions/{promotion_id}?update_mask&#x3D;display_name,start_time &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;display_name\&quot;: \&quot;new value\&quot;,   \&quot;start_time\&quot;: \&quot;2006-01-02T15:04:05Z07:00\&quot;,   \&quot;end_time\&quot;: \&quot;2006-01-02T15:04:05Z07:00\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;end_time&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
     * @param collectionId The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotionId The promotion to update, e.g. &#x60;1234&#x60;. (required)
     * @param updateMask The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;display_name&#x60;, &#x60;filter_boosts&#x60;.  For each field that you want to update, provide a corresponding value in the promotion object containing the new value. (required)
     * @param promotion Details of the promotion to update. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @return Promotion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the promotion was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Promotion updatePromotion(String collectionId, String promotionId, String updateMask, Promotion promotion, String accountId) throws ApiException {
        ApiResponse<Promotion> localVarResp = updatePromotionWithHttpInfo(collectionId, promotionId, updateMask, promotion, accountId);
        return localVarResp.getData();
    }

    /**
     * Update promotion
     * Update the details of a promotion.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;display_name&#x60; and &#x60;start_time&#x60; fields, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/promotions/{promotion_id}?update_mask&#x3D;display_name,start_time &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;display_name\&quot;: \&quot;new value\&quot;,   \&quot;start_time\&quot;: \&quot;2006-01-02T15:04:05Z07:00\&quot;,   \&quot;end_time\&quot;: \&quot;2006-01-02T15:04:05Z07:00\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;end_time&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
     * @param collectionId The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotionId The promotion to update, e.g. &#x60;1234&#x60;. (required)
     * @param updateMask The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;display_name&#x60;, &#x60;filter_boosts&#x60;.  For each field that you want to update, provide a corresponding value in the promotion object containing the new value. (required)
     * @param promotion Details of the promotion to update. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @return ApiResponse&lt;Promotion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the promotion was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Promotion> updatePromotionWithHttpInfo(String collectionId, String promotionId, String updateMask, Promotion promotion, String accountId) throws ApiException {
        okhttp3.Call localVarCall = updatePromotionValidateBeforeCall(collectionId, promotionId, updateMask, promotion, accountId, null);
        Type localVarReturnType = new TypeToken<Promotion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update promotion (asynchronously)
     * Update the details of a promotion.  Pass each field that you want to update in the request body. Also specify the name of each field that you want to update in the &#x60;update_mask&#x60; in the request URL query string. Separate multiple fields with a comma. Fields included in the request body, but not included in the field mask are not updated.  For example, to update the &#x60;display_name&#x60; and &#x60;start_time&#x60; fields, make a &#x60;PATCH&#x60; request to the URL:  &#x60;&#x60;&#x60; /v4/collections/{collection_id}/promotions/{promotion_id}?update_mask&#x3D;display_name,start_time &#x60;&#x60;&#x60;  With the JSON body:  &#x60;&#x60;&#x60; {   \&quot;display_name\&quot;: \&quot;new value\&quot;,   \&quot;start_time\&quot;: \&quot;2006-01-02T15:04:05Z07:00\&quot;,   \&quot;end_time\&quot;: \&quot;2006-01-02T15:04:05Z07:00\&quot; } &#x60;&#x60;&#x60;  &gt; Note: In this example &#x60;end_time&#x60; is not updated because it is not specified in the &#x60;update_mask&#x60;.
     * @param collectionId The collection the promotion belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param promotionId The promotion to update, e.g. &#x60;1234&#x60;. (required)
     * @param updateMask The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  Each field should be in snake case, e.g. &#x60;display_name&#x60;, &#x60;filter_boosts&#x60;.  For each field that you want to update, provide a corresponding value in the promotion object containing the new value. (required)
     * @param promotion Details of the promotion to update. (required)
     * @param accountId The account that owns the collection, e.g. &#x60;1618535966441231024&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the promotion was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePromotionAsync(String collectionId, String promotionId, String updateMask, Promotion promotion, String accountId, final ApiCallback<Promotion> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePromotionValidateBeforeCall(collectionId, promotionId, updateMask, promotion, accountId, _callback);
        Type localVarReturnType = new TypeToken<Promotion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
