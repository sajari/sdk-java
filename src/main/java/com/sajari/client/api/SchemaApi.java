/*
 * Search.io API
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sajari.client.api;

import com.sajari.client.ApiCallback;
import com.sajari.client.ApiClient;
import com.sajari.client.ApiException;
import com.sajari.client.ApiResponse;
import com.sajari.client.Configuration;
import com.sajari.client.Pair;
import com.sajari.client.ProgressRequestBody;
import com.sajari.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sajari.client.model.BatchCreateSchemaFieldsRequest;
import com.sajari.client.model.BatchCreateSchemaFieldsResponse;
import com.sajari.client.model.Error;
import com.sajari.client.model.ListSchemaFieldsResponse;
import com.sajari.client.model.SchemaField;

import java.lang.reflect.Type;

public class SchemaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SchemaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchemaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchCreateSchemaFields
     * @param collectionId The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;. (required)
     * @param batchCreateSchemaFieldsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchCreateSchemaFieldsCall(String collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchCreateSchemaFieldsRequest;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/schemaFields:batchCreate"
            .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchCreateSchemaFieldsValidateBeforeCall(String collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling batchCreateSchemaFields(Async)");
        }
        
        // verify the required parameter 'batchCreateSchemaFieldsRequest' is set
        if (batchCreateSchemaFieldsRequest == null) {
            throw new ApiException("Missing the required parameter 'batchCreateSchemaFieldsRequest' when calling batchCreateSchemaFields(Async)");
        }
        

        okhttp3.Call localVarCall = batchCreateSchemaFieldsCall(collectionId, batchCreateSchemaFieldsRequest, _callback);
        return localVarCall;

    }

    /**
     * Batch create schema fields
     * The batch version of the [CreateSchemaField](/docs/api#operation/CreateSchemaField) call.
     * @param collectionId The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;. (required)
     * @param batchCreateSchemaFieldsRequest  (required)
     * @return BatchCreateSchemaFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public BatchCreateSchemaFieldsResponse batchCreateSchemaFields(String collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest) throws ApiException {
        ApiResponse<BatchCreateSchemaFieldsResponse> localVarResp = batchCreateSchemaFieldsWithHttpInfo(collectionId, batchCreateSchemaFieldsRequest);
        return localVarResp.getData();
    }

    /**
     * Batch create schema fields
     * The batch version of the [CreateSchemaField](/docs/api#operation/CreateSchemaField) call.
     * @param collectionId The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;. (required)
     * @param batchCreateSchemaFieldsRequest  (required)
     * @return ApiResponse&lt;BatchCreateSchemaFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchCreateSchemaFieldsResponse> batchCreateSchemaFieldsWithHttpInfo(String collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest) throws ApiException {
        okhttp3.Call localVarCall = batchCreateSchemaFieldsValidateBeforeCall(collectionId, batchCreateSchemaFieldsRequest, null);
        Type localVarReturnType = new TypeToken<BatchCreateSchemaFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch create schema fields (asynchronously)
     * The batch version of the [CreateSchemaField](/docs/api#operation/CreateSchemaField) call.
     * @param collectionId The collection to create the schema fields in, e.g. &#x60;my-collection&#x60;. (required)
     * @param batchCreateSchemaFieldsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchCreateSchemaFieldsAsync(String collectionId, BatchCreateSchemaFieldsRequest batchCreateSchemaFieldsRequest, final ApiCallback<BatchCreateSchemaFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchCreateSchemaFieldsValidateBeforeCall(collectionId, batchCreateSchemaFieldsRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchCreateSchemaFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSchemaField
     * @param collectionId The collection to create a schema field in, e.g. &#x60;my-collection&#x60;. (required)
     * @param schemaField The schema field to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSchemaFieldCall(String collectionId, SchemaField schemaField, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schemaField;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/schemaFields"
            .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSchemaFieldValidateBeforeCall(String collectionId, SchemaField schemaField, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling createSchemaField(Async)");
        }
        
        // verify the required parameter 'schemaField' is set
        if (schemaField == null) {
            throw new ApiException("Missing the required parameter 'schemaField' when calling createSchemaField(Async)");
        }
        

        okhttp3.Call localVarCall = createSchemaFieldCall(collectionId, schemaField, _callback);
        return localVarCall;

    }

    /**
     * Create schema field
     * Create a new field in a collection&#39;s schema.
     * @param collectionId The collection to create a schema field in, e.g. &#x60;my-collection&#x60;. (required)
     * @param schemaField The schema field to create. (required)
     * @return SchemaField
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public SchemaField createSchemaField(String collectionId, SchemaField schemaField) throws ApiException {
        ApiResponse<SchemaField> localVarResp = createSchemaFieldWithHttpInfo(collectionId, schemaField);
        return localVarResp.getData();
    }

    /**
     * Create schema field
     * Create a new field in a collection&#39;s schema.
     * @param collectionId The collection to create a schema field in, e.g. &#x60;my-collection&#x60;. (required)
     * @param schemaField The schema field to create. (required)
     * @return ApiResponse&lt;SchemaField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchemaField> createSchemaFieldWithHttpInfo(String collectionId, SchemaField schemaField) throws ApiException {
        okhttp3.Call localVarCall = createSchemaFieldValidateBeforeCall(collectionId, schemaField, null);
        Type localVarReturnType = new TypeToken<SchemaField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create schema field (asynchronously)
     * Create a new field in a collection&#39;s schema.
     * @param collectionId The collection to create a schema field in, e.g. &#x60;my-collection&#x60;. (required)
     * @param schemaField The schema field to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSchemaFieldAsync(String collectionId, SchemaField schemaField, final ApiCallback<SchemaField> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSchemaFieldValidateBeforeCall(collectionId, schemaField, _callback);
        Type localVarReturnType = new TypeToken<SchemaField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSchemaField
     * @param collectionId The collection the schema field belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param schemaFieldName The name of the schema field to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSchemaFieldCall(String collectionId, String schemaFieldName, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/schemaFields/{schema_field_name}"
            .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()))
            .replaceAll("\\{" + "schema_field_name" + "\\}", localVarApiClient.escapeString(schemaFieldName.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSchemaFieldValidateBeforeCall(String collectionId, String schemaFieldName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling deleteSchemaField(Async)");
        }
        
        // verify the required parameter 'schemaFieldName' is set
        if (schemaFieldName == null) {
            throw new ApiException("Missing the required parameter 'schemaFieldName' when calling deleteSchemaField(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSchemaFieldCall(collectionId, schemaFieldName, _callback);
        return localVarCall;

    }

    /**
     * Delete schema field
     * Deleting a schema field removes it from all records within the collection, however, references to the schema field in pipelines are not removed.  &gt; Note: This operation cannot be reversed.
     * @param collectionId The collection the schema field belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param schemaFieldName The name of the schema field to delete. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteSchemaField(String collectionId, String schemaFieldName) throws ApiException {
        ApiResponse<Object> localVarResp = deleteSchemaFieldWithHttpInfo(collectionId, schemaFieldName);
        return localVarResp.getData();
    }

    /**
     * Delete schema field
     * Deleting a schema field removes it from all records within the collection, however, references to the schema field in pipelines are not removed.  &gt; Note: This operation cannot be reversed.
     * @param collectionId The collection the schema field belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param schemaFieldName The name of the schema field to delete. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteSchemaFieldWithHttpInfo(String collectionId, String schemaFieldName) throws ApiException {
        okhttp3.Call localVarCall = deleteSchemaFieldValidateBeforeCall(collectionId, schemaFieldName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete schema field (asynchronously)
     * Deleting a schema field removes it from all records within the collection, however, references to the schema field in pipelines are not removed.  &gt; Note: This operation cannot be reversed.
     * @param collectionId The collection the schema field belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param schemaFieldName The name of the schema field to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSchemaFieldAsync(String collectionId, String schemaFieldName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSchemaFieldValidateBeforeCall(collectionId, schemaFieldName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSchemaFields
     * @param collectionId The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;. (required)
     * @param pageSize The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous [ListSchemaFields](/docs/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/docs/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSchemaFieldsCall(String collectionId, Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/schemaFields"
            .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSchemaFieldsValidateBeforeCall(String collectionId, Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling listSchemaFields(Async)");
        }
        

        okhttp3.Call localVarCall = listSchemaFieldsCall(collectionId, pageSize, pageToken, _callback);
        return localVarCall;

    }

    /**
     * List schema fields
     * Retrieve a list of schema fields in a collection.
     * @param collectionId The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;. (required)
     * @param pageSize The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous [ListSchemaFields](/docs/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/docs/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)
     * @return ListSchemaFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ListSchemaFieldsResponse listSchemaFields(String collectionId, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListSchemaFieldsResponse> localVarResp = listSchemaFieldsWithHttpInfo(collectionId, pageSize, pageToken);
        return localVarResp.getData();
    }

    /**
     * List schema fields
     * Retrieve a list of schema fields in a collection.
     * @param collectionId The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;. (required)
     * @param pageSize The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous [ListSchemaFields](/docs/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/docs/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)
     * @return ApiResponse&lt;ListSchemaFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSchemaFieldsResponse> listSchemaFieldsWithHttpInfo(String collectionId, Integer pageSize, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSchemaFieldsValidateBeforeCall(collectionId, pageSize, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSchemaFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List schema fields (asynchronously)
     * Retrieve a list of schema fields in a collection.
     * @param collectionId The collection that owns this set of schema fields, e.g. &#x60;my-collection&#x60;. (required)
     * @param pageSize The maximum number of schema fields to return. The service may return fewer than this value.  If unspecified, at most 50 schema fields are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous [ListSchemaFields](/docs/api#operation/ListSchemaFields) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListSchemaFields](/docs/api#operation/ListSchemaFields) must match the call that provided the page token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSchemaFieldsAsync(String collectionId, Integer pageSize, String pageToken, final ApiCallback<ListSchemaFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSchemaFieldsValidateBeforeCall(collectionId, pageSize, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSchemaFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSchemaField
     * @param collectionId The collection the schema field belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param schemaFieldName The name of the schema field to update. (required)
     * @param schemaField The schema field details to update. (required)
     * @param updateMask The list of fields to update, separated by a comma, e.g. &#x60;name,description&#x60;.  Each field should be in snake case.  For each field that you want to update, provide a corresponding value in the schema field object containing the new value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSchemaFieldCall(String collectionId, String schemaFieldName, SchemaField schemaField, String updateMask, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schemaField;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/schemaFields/{schema_field_name}"
            .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()))
            .replaceAll("\\{" + "schema_field_name" + "\\}", localVarApiClient.escapeString(schemaFieldName.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (updateMask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("update_mask", updateMask));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSchemaFieldValidateBeforeCall(String collectionId, String schemaFieldName, SchemaField schemaField, String updateMask, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling updateSchemaField(Async)");
        }
        
        // verify the required parameter 'schemaFieldName' is set
        if (schemaFieldName == null) {
            throw new ApiException("Missing the required parameter 'schemaFieldName' when calling updateSchemaField(Async)");
        }
        
        // verify the required parameter 'schemaField' is set
        if (schemaField == null) {
            throw new ApiException("Missing the required parameter 'schemaField' when calling updateSchemaField(Async)");
        }
        

        okhttp3.Call localVarCall = updateSchemaFieldCall(collectionId, schemaFieldName, schemaField, updateMask, _callback);
        return localVarCall;

    }

    /**
     * Update schema field
     * Update the details of a schema field.  Only &#x60;name&#x60; and &#x60;description&#x60; can be updated.
     * @param collectionId The collection the schema field belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param schemaFieldName The name of the schema field to update. (required)
     * @param schemaField The schema field details to update. (required)
     * @param updateMask The list of fields to update, separated by a comma, e.g. &#x60;name,description&#x60;.  Each field should be in snake case.  For each field that you want to update, provide a corresponding value in the schema field object containing the new value. (optional)
     * @return SchemaField
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public SchemaField updateSchemaField(String collectionId, String schemaFieldName, SchemaField schemaField, String updateMask) throws ApiException {
        ApiResponse<SchemaField> localVarResp = updateSchemaFieldWithHttpInfo(collectionId, schemaFieldName, schemaField, updateMask);
        return localVarResp.getData();
    }

    /**
     * Update schema field
     * Update the details of a schema field.  Only &#x60;name&#x60; and &#x60;description&#x60; can be updated.
     * @param collectionId The collection the schema field belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param schemaFieldName The name of the schema field to update. (required)
     * @param schemaField The schema field details to update. (required)
     * @param updateMask The list of fields to update, separated by a comma, e.g. &#x60;name,description&#x60;.  Each field should be in snake case.  For each field that you want to update, provide a corresponding value in the schema field object containing the new value. (optional)
     * @return ApiResponse&lt;SchemaField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchemaField> updateSchemaFieldWithHttpInfo(String collectionId, String schemaFieldName, SchemaField schemaField, String updateMask) throws ApiException {
        okhttp3.Call localVarCall = updateSchemaFieldValidateBeforeCall(collectionId, schemaFieldName, schemaField, updateMask, null);
        Type localVarReturnType = new TypeToken<SchemaField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update schema field (asynchronously)
     * Update the details of a schema field.  Only &#x60;name&#x60; and &#x60;description&#x60; can be updated.
     * @param collectionId The collection the schema field belongs to, e.g. &#x60;my-collection&#x60;. (required)
     * @param schemaFieldName The name of the schema field to update. (required)
     * @param schemaField The schema field details to update. (required)
     * @param updateMask The list of fields to update, separated by a comma, e.g. &#x60;name,description&#x60;.  Each field should be in snake case.  For each field that you want to update, provide a corresponding value in the schema field object containing the new value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSchemaFieldAsync(String collectionId, String schemaFieldName, SchemaField schemaField, String updateMask, final ApiCallback<SchemaField> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSchemaFieldValidateBeforeCall(collectionId, schemaFieldName, schemaField, updateMask, _callback);
        Type localVarReturnType = new TypeToken<SchemaField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
