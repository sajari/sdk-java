/*
 * Sajari API
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@sajari.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sajari.client.api;

import com.google.gson.reflect.TypeToken;
import com.sajari.client.ApiCallback;
import com.sajari.client.ApiClient;
import com.sajari.client.ApiException;
import com.sajari.client.ApiResponse;
import com.sajari.client.Configuration;
import com.sajari.client.Pair;
import com.sajari.client.model.GeneratePipelinesRequest;
import com.sajari.client.model.GeneratePipelinesResponse;
import com.sajari.client.model.GetDefaultPipelineResponse;
import com.sajari.client.model.ListPipelinesResponse;
import com.sajari.client.model.Pipeline;
import com.sajari.client.model.SetDefaultPipelineRequest;
import com.sajari.client.model.SetDefaultVersionRequest;

import java.lang.reflect.Type;

public class PipelinesApi {
    private ApiClient localVarApiClient;

    public PipelinesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PipelinesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createPipeline
     *
     * @param collectionId The collection to create the pipeline in, e.g. &#x60;my-collection&#x60;. (required)
     * @param pipeline     The pipeline to create. (required)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createPipelineCall(String collectionId, Pipeline pipeline, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pipeline;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/pipelines"
                .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "application/yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json", "application/yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"BasicAuth"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPipelineValidateBeforeCall(String collectionId, Pipeline pipeline, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling createPipeline(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling createPipeline(Async)");
        }


        okhttp3.Call localVarCall = createPipelineCall(collectionId, pipeline, _callback);
        return localVarCall;

    }

    /**
     * Create pipeline
     * Create a new pipeline.  Pipelines are immutable once created. If you want to change a pipeline e.g. to add or change some steps, you need to create a new version of that pipeline.  To start using a new pipeline you need to update your record ingestion calls and/or your query calls to specify the new pipeline.  To create the pipeline from YAML, set the request&#39;s &#x60;Content-Type&#x60; header to &#x60;application/yaml&#x60; and submit the pipeline&#39;s YAML in the request body.
     *
     * @param collectionId The collection to create the pipeline in, e.g. &#x60;my-collection&#x60;. (required)
     * @param pipeline     The pipeline to create. (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public Pipeline createPipeline(String collectionId, Pipeline pipeline) throws ApiException {
        ApiResponse<Pipeline> localVarResp = createPipelineWithHttpInfo(collectionId, pipeline);
        return localVarResp.getData();
    }

    /**
     * Create pipeline
     * Create a new pipeline.  Pipelines are immutable once created. If you want to change a pipeline e.g. to add or change some steps, you need to create a new version of that pipeline.  To start using a new pipeline you need to update your record ingestion calls and/or your query calls to specify the new pipeline.  To create the pipeline from YAML, set the request&#39;s &#x60;Content-Type&#x60; header to &#x60;application/yaml&#x60; and submit the pipeline&#39;s YAML in the request body.
     *
     * @param collectionId The collection to create the pipeline in, e.g. &#x60;my-collection&#x60;. (required)
     * @param pipeline     The pipeline to create. (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Pipeline> createPipelineWithHttpInfo(String collectionId, Pipeline pipeline) throws ApiException {
        okhttp3.Call localVarCall = createPipelineValidateBeforeCall(collectionId, pipeline, null);
        Type localVarReturnType = new TypeToken<Pipeline>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create pipeline (asynchronously)
     * Create a new pipeline.  Pipelines are immutable once created. If you want to change a pipeline e.g. to add or change some steps, you need to create a new version of that pipeline.  To start using a new pipeline you need to update your record ingestion calls and/or your query calls to specify the new pipeline.  To create the pipeline from YAML, set the request&#39;s &#x60;Content-Type&#x60; header to &#x60;application/yaml&#x60; and submit the pipeline&#39;s YAML in the request body.
     *
     * @param collectionId The collection to create the pipeline in, e.g. &#x60;my-collection&#x60;. (required)
     * @param pipeline     The pipeline to create. (required)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createPipelineAsync(String collectionId, Pipeline pipeline, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPipelineValidateBeforeCall(collectionId, pipeline, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for generatePipelines
     *
     * @param collectionId             The collection, e.g. &#x60;my-collection&#x60;. (required)
     * @param generatePipelinesRequest (required)
     * @param _callback                Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call generatePipelinesCall(String collectionId, GeneratePipelinesRequest generatePipelinesRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = generatePipelinesRequest;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}:generatePipelines"
                .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "application/yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"BasicAuth"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePipelinesValidateBeforeCall(String collectionId, GeneratePipelinesRequest generatePipelinesRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling generatePipelines(Async)");
        }

        // verify the required parameter 'generatePipelinesRequest' is set
        if (generatePipelinesRequest == null) {
            throw new ApiException("Missing the required parameter 'generatePipelinesRequest' when calling generatePipelines(Async)");
        }


        okhttp3.Call localVarCall = generatePipelinesCall(collectionId, generatePipelinesRequest, _callback);
        return localVarCall;

    }

    /**
     * Generate pipelines
     * Generate basic record, query and autocomplete pipeline templates. Use these templates as a starting point for your collection&#39;s pipelines.  This call returns a set of pipelines that you can pass directly to the create pipeline call.  The generated templates can be returned in JSON, the default, or YAML. To return the generated pipelines in YAML, set the request&#39;s &#x60;Accept&#x60; header to &#x60;application/yaml&#x60;. The three pipelines in the YAML response are separated by three dashes (&#x60;---&#x60;).
     *
     * @param collectionId             The collection, e.g. &#x60;my-collection&#x60;. (required)
     * @param generatePipelinesRequest (required)
     * @return GeneratePipelinesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public GeneratePipelinesResponse generatePipelines(String collectionId, GeneratePipelinesRequest generatePipelinesRequest) throws ApiException {
        ApiResponse<GeneratePipelinesResponse> localVarResp = generatePipelinesWithHttpInfo(collectionId, generatePipelinesRequest);
        return localVarResp.getData();
    }

    /**
     * Generate pipelines
     * Generate basic record, query and autocomplete pipeline templates. Use these templates as a starting point for your collection&#39;s pipelines.  This call returns a set of pipelines that you can pass directly to the create pipeline call.  The generated templates can be returned in JSON, the default, or YAML. To return the generated pipelines in YAML, set the request&#39;s &#x60;Accept&#x60; header to &#x60;application/yaml&#x60;. The three pipelines in the YAML response are separated by three dashes (&#x60;---&#x60;).
     *
     * @param collectionId             The collection, e.g. &#x60;my-collection&#x60;. (required)
     * @param generatePipelinesRequest (required)
     * @return ApiResponse&lt;GeneratePipelinesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GeneratePipelinesResponse> generatePipelinesWithHttpInfo(String collectionId, GeneratePipelinesRequest generatePipelinesRequest) throws ApiException {
        okhttp3.Call localVarCall = generatePipelinesValidateBeforeCall(collectionId, generatePipelinesRequest, null);
        Type localVarReturnType = new TypeToken<GeneratePipelinesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate pipelines (asynchronously)
     * Generate basic record, query and autocomplete pipeline templates. Use these templates as a starting point for your collection&#39;s pipelines.  This call returns a set of pipelines that you can pass directly to the create pipeline call.  The generated templates can be returned in JSON, the default, or YAML. To return the generated pipelines in YAML, set the request&#39;s &#x60;Accept&#x60; header to &#x60;application/yaml&#x60;. The three pipelines in the YAML response are separated by three dashes (&#x60;---&#x60;).
     *
     * @param collectionId             The collection, e.g. &#x60;my-collection&#x60;. (required)
     * @param generatePipelinesRequest (required)
     * @param _callback                The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call generatePipelinesAsync(String collectionId, GeneratePipelinesRequest generatePipelinesRequest, final ApiCallback<GeneratePipelinesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePipelinesValidateBeforeCall(collectionId, generatePipelinesRequest, _callback);
        Type localVarReturnType = new TypeToken<GeneratePipelinesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getDefaultPipeline
     *
     * @param collectionId The collection to get the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param type         The type of the pipeline to get.   - TYPE_UNSPECIFIED: Pipeline type not specified.  - RECORD: Record pipeline.  - QUERY: Query pipeline. (required)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDefaultPipelineCall(String collectionId, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}:getDefaultPipeline"
                .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"BasicAuth"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultPipelineValidateBeforeCall(String collectionId, String type, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getDefaultPipeline(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getDefaultPipeline(Async)");
        }


        okhttp3.Call localVarCall = getDefaultPipelineCall(collectionId, type, _callback);
        return localVarCall;

    }

    /**
     * Get default pipeline
     * Get the default pipeline for a collection.  Every collection has a default record pipeline and a default query pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default record pipeline is used if none is provided. When querying a collection, the default query pipeline is used if none is provided.
     *
     * @param collectionId The collection to get the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param type         The type of the pipeline to get.   - TYPE_UNSPECIFIED: Pipeline type not specified.  - RECORD: Record pipeline.  - QUERY: Query pipeline. (required)
     * @return GetDefaultPipelineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public GetDefaultPipelineResponse getDefaultPipeline(String collectionId, String type) throws ApiException {
        ApiResponse<GetDefaultPipelineResponse> localVarResp = getDefaultPipelineWithHttpInfo(collectionId, type);
        return localVarResp.getData();
    }

    /**
     * Get default pipeline
     * Get the default pipeline for a collection.  Every collection has a default record pipeline and a default query pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default record pipeline is used if none is provided. When querying a collection, the default query pipeline is used if none is provided.
     *
     * @param collectionId The collection to get the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param type         The type of the pipeline to get.   - TYPE_UNSPECIFIED: Pipeline type not specified.  - RECORD: Record pipeline.  - QUERY: Query pipeline. (required)
     * @return ApiResponse&lt;GetDefaultPipelineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetDefaultPipelineResponse> getDefaultPipelineWithHttpInfo(String collectionId, String type) throws ApiException {
        okhttp3.Call localVarCall = getDefaultPipelineValidateBeforeCall(collectionId, type, null);
        Type localVarReturnType = new TypeToken<GetDefaultPipelineResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default pipeline (asynchronously)
     * Get the default pipeline for a collection.  Every collection has a default record pipeline and a default query pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default record pipeline is used if none is provided. When querying a collection, the default query pipeline is used if none is provided.
     *
     * @param collectionId The collection to get the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param type         The type of the pipeline to get.   - TYPE_UNSPECIFIED: Pipeline type not specified.  - RECORD: Record pipeline.  - QUERY: Query pipeline. (required)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDefaultPipelineAsync(String collectionId, String type, final ApiCallback<GetDefaultPipelineResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultPipelineValidateBeforeCall(collectionId, type, _callback);
        Type localVarReturnType = new TypeToken<GetDefaultPipelineResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getDefaultVersion
     *
     * @param collectionId The collection that owns the pipeline to get the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param type         The type of the pipeline to get the default version of. (required)
     * @param name         The name of the pipeline to get the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param view         The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to VIEW_UNSPECIFIED)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the pipeline does not have a default version. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDefaultVersionCall(String collectionId, String type, String name, String view, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/pipelines/{type}/{name}:getDefaultVersion"
                .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()))
                .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
                .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
                "application/json", "application/yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"BasicAuth"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultVersionValidateBeforeCall(String collectionId, String type, String name, String view, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getDefaultVersion(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getDefaultVersion(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDefaultVersion(Async)");
        }


        okhttp3.Call localVarCall = getDefaultVersionCall(collectionId, type, name, view, _callback);
        return localVarCall;

    }

    /**
     * Get default pipeline version
     * Get the default version for a given pipeline.  The default version of a pipeline is used when a pipeline is referred to without specifying a version.  This allows you to change the pipeline version used for requests without having to change your code.  To retrieve the pipeline in YAML, set the request&#39;s &#x60;Accept&#x60; header to &#x60;application/yaml&#x60;.
     *
     * @param collectionId The collection that owns the pipeline to get the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param type         The type of the pipeline to get the default version of. (required)
     * @param name         The name of the pipeline to get the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param view         The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to VIEW_UNSPECIFIED)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the pipeline does not have a default version. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public Pipeline getDefaultVersion(String collectionId, String type, String name, String view) throws ApiException {
        ApiResponse<Pipeline> localVarResp = getDefaultVersionWithHttpInfo(collectionId, type, name, view);
        return localVarResp.getData();
    }

    /**
     * Get default pipeline version
     * Get the default version for a given pipeline.  The default version of a pipeline is used when a pipeline is referred to without specifying a version.  This allows you to change the pipeline version used for requests without having to change your code.  To retrieve the pipeline in YAML, set the request&#39;s &#x60;Accept&#x60; header to &#x60;application/yaml&#x60;.
     *
     * @param collectionId The collection that owns the pipeline to get the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param type         The type of the pipeline to get the default version of. (required)
     * @param name         The name of the pipeline to get the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param view         The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to VIEW_UNSPECIFIED)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the pipeline does not have a default version. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Pipeline> getDefaultVersionWithHttpInfo(String collectionId, String type, String name, String view) throws ApiException {
        okhttp3.Call localVarCall = getDefaultVersionValidateBeforeCall(collectionId, type, name, view, null);
        Type localVarReturnType = new TypeToken<Pipeline>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default pipeline version (asynchronously)
     * Get the default version for a given pipeline.  The default version of a pipeline is used when a pipeline is referred to without specifying a version.  This allows you to change the pipeline version used for requests without having to change your code.  To retrieve the pipeline in YAML, set the request&#39;s &#x60;Accept&#x60; header to &#x60;application/yaml&#x60;.
     *
     * @param collectionId The collection that owns the pipeline to get the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param type         The type of the pipeline to get the default version of. (required)
     * @param name         The name of the pipeline to get the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param view         The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to VIEW_UNSPECIFIED)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the pipeline does not have a default version. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDefaultVersionAsync(String collectionId, String type, String name, String view, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultVersionValidateBeforeCall(collectionId, type, name, view, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getPipeline
     *
     * @param collectionId The collection that owns the pipeline, e.g. &#x60;my-collection&#x60;. (required)
     * @param type         The type of the pipeline to retrieve. (required)
     * @param name         The name of the pipeline to retrieve, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param version      The version of the pipeline to retrieve, e.g. &#x60;42&#x60;. (required)
     * @param view         The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to VIEW_UNSPECIFIED)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getPipelineCall(String collectionId, String type, String name, String version, String view, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/pipelines/{type}/{name}/{version}"
                .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()))
                .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
                .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()))
                .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
                "application/json", "application/yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"BasicAuth"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineValidateBeforeCall(String collectionId, String type, String name, String version, String view, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getPipeline(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPipeline(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPipeline(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getPipeline(Async)");
        }


        okhttp3.Call localVarCall = getPipelineCall(collectionId, type, name, version, view, _callback);
        return localVarCall;

    }

    /**
     * Get pipeline
     * Retrieve the details of a pipeline. Supply the type, name and version.  To retrieve the pipeline in YAML, set the request&#39;s &#x60;Accept&#x60; header to &#x60;application/yaml&#x60;.
     *
     * @param collectionId The collection that owns the pipeline, e.g. &#x60;my-collection&#x60;. (required)
     * @param type         The type of the pipeline to retrieve. (required)
     * @param name         The name of the pipeline to retrieve, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param version      The version of the pipeline to retrieve, e.g. &#x60;42&#x60;. (required)
     * @param view         The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to VIEW_UNSPECIFIED)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public Pipeline getPipeline(String collectionId, String type, String name, String version, String view) throws ApiException {
        ApiResponse<Pipeline> localVarResp = getPipelineWithHttpInfo(collectionId, type, name, version, view);
        return localVarResp.getData();
    }

    /**
     * Get pipeline
     * Retrieve the details of a pipeline. Supply the type, name and version.  To retrieve the pipeline in YAML, set the request&#39;s &#x60;Accept&#x60; header to &#x60;application/yaml&#x60;.
     *
     * @param collectionId The collection that owns the pipeline, e.g. &#x60;my-collection&#x60;. (required)
     * @param type         The type of the pipeline to retrieve. (required)
     * @param name         The name of the pipeline to retrieve, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param version      The version of the pipeline to retrieve, e.g. &#x60;42&#x60;. (required)
     * @param view         The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to VIEW_UNSPECIFIED)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Pipeline> getPipelineWithHttpInfo(String collectionId, String type, String name, String version, String view) throws ApiException {
        okhttp3.Call localVarCall = getPipelineValidateBeforeCall(collectionId, type, name, version, view, null);
        Type localVarReturnType = new TypeToken<Pipeline>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pipeline (asynchronously)
     * Retrieve the details of a pipeline. Supply the type, name and version.  To retrieve the pipeline in YAML, set the request&#39;s &#x60;Accept&#x60; header to &#x60;application/yaml&#x60;.
     *
     * @param collectionId The collection that owns the pipeline, e.g. &#x60;my-collection&#x60;. (required)
     * @param type         The type of the pipeline to retrieve. (required)
     * @param name         The name of the pipeline to retrieve, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param version      The version of the pipeline to retrieve, e.g. &#x60;42&#x60;. (required)
     * @param view         The amount of information to include in the retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to VIEW_UNSPECIFIED)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getPipelineAsync(String collectionId, String type, String name, String version, String view, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineValidateBeforeCall(collectionId, type, name, version, view, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listPipelines
     *
     * @param collectionId The collection that owns this set of pipelines, e.g. &#x60;my-collection&#x60;. (required)
     * @param pageSize     The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param pageToken    A page token, received from a previous [ListPipelines](/api#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/api#operation/ListPipelines) must match the call that provided the page token. (optional)
     * @param view         The amount of information to include in each retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to VIEW_UNSPECIFIED)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listPipelinesCall(String collectionId, Integer pageSize, String pageToken, String view, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/pipelines"
                .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"BasicAuth"};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPipelinesValidateBeforeCall(String collectionId, Integer pageSize, String pageToken, String view, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling listPipelines(Async)");
        }


        okhttp3.Call localVarCall = listPipelinesCall(collectionId, pageSize, pageToken, view, _callback);
        return localVarCall;

    }

    /**
     * List pipelines
     * Retrieve a list of pipelines in a collection.
     *
     * @param collectionId The collection that owns this set of pipelines, e.g. &#x60;my-collection&#x60;. (required)
     * @param pageSize     The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param pageToken    A page token, received from a previous [ListPipelines](/api#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/api#operation/ListPipelines) must match the call that provided the page token. (optional)
     * @param view         The amount of information to include in each retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to VIEW_UNSPECIFIED)
     * @return ListPipelinesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public ListPipelinesResponse listPipelines(String collectionId, Integer pageSize, String pageToken, String view) throws ApiException {
        ApiResponse<ListPipelinesResponse> localVarResp = listPipelinesWithHttpInfo(collectionId, pageSize, pageToken, view);
        return localVarResp.getData();
    }

    /**
     * List pipelines
     * Retrieve a list of pipelines in a collection.
     *
     * @param collectionId The collection that owns this set of pipelines, e.g. &#x60;my-collection&#x60;. (required)
     * @param pageSize     The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param pageToken    A page token, received from a previous [ListPipelines](/api#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/api#operation/ListPipelines) must match the call that provided the page token. (optional)
     * @param view         The amount of information to include in each retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to VIEW_UNSPECIFIED)
     * @return ApiResponse&lt;ListPipelinesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListPipelinesResponse> listPipelinesWithHttpInfo(String collectionId, Integer pageSize, String pageToken, String view) throws ApiException {
        okhttp3.Call localVarCall = listPipelinesValidateBeforeCall(collectionId, pageSize, pageToken, view, null);
        Type localVarReturnType = new TypeToken<ListPipelinesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pipelines (asynchronously)
     * Retrieve a list of pipelines in a collection.
     *
     * @param collectionId The collection that owns this set of pipelines, e.g. &#x60;my-collection&#x60;. (required)
     * @param pageSize     The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000. (optional)
     * @param pageToken    A page token, received from a previous [ListPipelines](/api#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/api#operation/ListPipelines) must match the call that provided the page token. (optional)
     * @param view         The amount of information to include in each retrieved pipeline.   - VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;BASIC&#x60; view.  - BASIC: Include basic information including type, name, version and description but not the full step configuration. This is the default value (for both [ListPipelines](/api#operation/ListPipelines) and [GetPipeline](/api#operation/GetPipeline)).  - FULL: Include the information from &#x60;BASIC&#x60;, plus full step configuration. (optional, default to VIEW_UNSPECIFIED)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listPipelinesAsync(String collectionId, Integer pageSize, String pageToken, String view, final ApiCallback<ListPipelinesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPipelinesValidateBeforeCall(collectionId, pageSize, pageToken, view, _callback);
        Type localVarReturnType = new TypeToken<ListPipelinesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for setDefaultPipeline
     *
     * @param collectionId              The collection to set the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param setDefaultPipelineRequest (required)
     * @param _callback                 Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call setDefaultPipelineCall(String collectionId, SetDefaultPipelineRequest setDefaultPipelineRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = setDefaultPipelineRequest;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}:setDefaultPipeline"
                .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"BasicAuth"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefaultPipelineValidateBeforeCall(String collectionId, SetDefaultPipelineRequest setDefaultPipelineRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling setDefaultPipeline(Async)");
        }

        // verify the required parameter 'setDefaultPipelineRequest' is set
        if (setDefaultPipelineRequest == null) {
            throw new ApiException("Missing the required parameter 'setDefaultPipelineRequest' when calling setDefaultPipeline(Async)");
        }


        okhttp3.Call localVarCall = setDefaultPipelineCall(collectionId, setDefaultPipelineRequest, _callback);
        return localVarCall;

    }

    /**
     * Set default pipeline
     * Set the default pipeline for a collection.  Every collection has a default record pipeline and a default query pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default record pipeline is used if none is provided. When querying a collection, the default query pipeline is used if none is provided.  Once a default pipeline has been set it cannot be cleared, only set to another pipeline.
     *
     * @param collectionId              The collection to set the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param setDefaultPipelineRequest (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public Object setDefaultPipeline(String collectionId, SetDefaultPipelineRequest setDefaultPipelineRequest) throws ApiException {
        ApiResponse<Object> localVarResp = setDefaultPipelineWithHttpInfo(collectionId, setDefaultPipelineRequest);
        return localVarResp.getData();
    }

    /**
     * Set default pipeline
     * Set the default pipeline for a collection.  Every collection has a default record pipeline and a default query pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default record pipeline is used if none is provided. When querying a collection, the default query pipeline is used if none is provided.  Once a default pipeline has been set it cannot be cleared, only set to another pipeline.
     *
     * @param collectionId              The collection to set the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param setDefaultPipelineRequest (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Object> setDefaultPipelineWithHttpInfo(String collectionId, SetDefaultPipelineRequest setDefaultPipelineRequest) throws ApiException {
        okhttp3.Call localVarCall = setDefaultPipelineValidateBeforeCall(collectionId, setDefaultPipelineRequest, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set default pipeline (asynchronously)
     * Set the default pipeline for a collection.  Every collection has a default record pipeline and a default query pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default record pipeline is used if none is provided. When querying a collection, the default query pipeline is used if none is provided.  Once a default pipeline has been set it cannot be cleared, only set to another pipeline.
     *
     * @param collectionId              The collection to set the default query pipeline of, e.g. &#x60;my-collection&#x60;. (required)
     * @param setDefaultPipelineRequest (required)
     * @param _callback                 The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call setDefaultPipelineAsync(String collectionId, SetDefaultPipelineRequest setDefaultPipelineRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDefaultPipelineValidateBeforeCall(collectionId, setDefaultPipelineRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for setDefaultVersion
     *
     * @param collectionId             The collection that owns the pipeline to set the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param type                     The type of the pipeline to set the default version of. (required)
     * @param name                     The name of the pipeline to set the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param setDefaultVersionRequest (required)
     * @param _callback                Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call setDefaultVersionCall(String collectionId, String type, String name, SetDefaultVersionRequest setDefaultVersionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = setDefaultVersionRequest;

        // create path and map variables
        String localVarPath = "/v4/collections/{collection_id}/pipelines/{type}/{name}:setDefaultVersion"
                .replaceAll("\\{" + "collection_id" + "\\}", localVarApiClient.escapeString(collectionId.toString()))
                .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
                .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();
        java.util.Map<String, String> localVarCookieParams = new java.util.HashMap<String, String>();
        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{"BasicAuth"};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefaultVersionValidateBeforeCall(String collectionId, String type, String name, SetDefaultVersionRequest setDefaultVersionRequest, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling setDefaultVersion(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling setDefaultVersion(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setDefaultVersion(Async)");
        }

        // verify the required parameter 'setDefaultVersionRequest' is set
        if (setDefaultVersionRequest == null) {
            throw new ApiException("Missing the required parameter 'setDefaultVersionRequest' when calling setDefaultVersion(Async)");
        }


        okhttp3.Call localVarCall = setDefaultVersionCall(collectionId, type, name, setDefaultVersionRequest, _callback);
        return localVarCall;

    }

    /**
     * Set default pipeline version
     * Set the default version for a given pipeline.  The default version of a pipeline is used when a pipeline is referred to without specifying a version.  This allows you to change the pipeline version used for requests without having to change your code.
     *
     * @param collectionId             The collection that owns the pipeline to set the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param type                     The type of the pipeline to set the default version of. (required)
     * @param name                     The name of the pipeline to set the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param setDefaultVersionRequest (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public Object setDefaultVersion(String collectionId, String type, String name, SetDefaultVersionRequest setDefaultVersionRequest) throws ApiException {
        ApiResponse<Object> localVarResp = setDefaultVersionWithHttpInfo(collectionId, type, name, setDefaultVersionRequest);
        return localVarResp.getData();
    }

    /**
     * Set default pipeline version
     * Set the default version for a given pipeline.  The default version of a pipeline is used when a pipeline is referred to without specifying a version.  This allows you to change the pipeline version used for requests without having to change your code.
     *
     * @param collectionId             The collection that owns the pipeline to set the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param type                     The type of the pipeline to set the default version of. (required)
     * @param name                     The name of the pipeline to set the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param setDefaultVersionRequest (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Object> setDefaultVersionWithHttpInfo(String collectionId, String type, String name, SetDefaultVersionRequest setDefaultVersionRequest) throws ApiException {
        okhttp3.Call localVarCall = setDefaultVersionValidateBeforeCall(collectionId, type, name, setDefaultVersionRequest, null);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set default pipeline version (asynchronously)
     * Set the default version for a given pipeline.  The default version of a pipeline is used when a pipeline is referred to without specifying a version.  This allows you to change the pipeline version used for requests without having to change your code.
     *
     * @param collectionId             The collection that owns the pipeline to set the default version of, e.g. &#x60;my-collection&#x60;. (required)
     * @param type                     The type of the pipeline to set the default version of. (required)
     * @param name                     The name of the pipeline to set the default version of, e.g. &#x60;my-pipeline&#x60;. (required)
     * @param setDefaultVersionRequest (required)
     * @param _callback                The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Returned when the request does not have valid authentication credentials. </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Returned when the user does not have permission to access the resource. </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Returned when the API encounters an internal error. </td><td>  -  </td></tr>
     * <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call setDefaultVersionAsync(String collectionId, String type, String name, SetDefaultVersionRequest setDefaultVersionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDefaultVersionValidateBeforeCall(collectionId, type, name, setDefaultVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
