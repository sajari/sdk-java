/*
 * Search.io API
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world's first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sajari.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sajari.client.model.RecordKey;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * UpdateRecordRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdateRecordRequest {
  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private RecordKey key;

  public static final String SERIALIZED_NAME_RECORD = "record";
  @SerializedName(SERIALIZED_NAME_RECORD)
  private java.util.Map<String, Object> record = new java.util.HashMap<>();

  public static final String SERIALIZED_NAME_UPDATE_MASK = "update_mask";
  @SerializedName(SERIALIZED_NAME_UPDATE_MASK)
  private String updateMask;

  public UpdateRecordRequest() { 
  }

  public UpdateRecordRequest key(RecordKey key) {
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public RecordKey getKey() {
    return key;
  }


  public void setKey(RecordKey key) {
    this.key = key;
  }


  public UpdateRecordRequest record(java.util.Map<String, Object> record) {
    
    this.record = record;
    return this;
  }

  public UpdateRecordRequest putRecordItem(String key, Object recordItem) {
    this.record.put(key, recordItem);
    return this;
  }

   /**
   * The record to update.
   * @return record
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The record to update.")

  public java.util.Map<String, Object> getRecord() {
    return record;
  }


  public void setRecord(java.util.Map<String, Object> record) {
    this.record = record;
  }


  public UpdateRecordRequest updateMask(String updateMask) {
    
    this.updateMask = updateMask;
    return this;
  }

   /**
   * The list of fields to be updated, separated by a comma, e.g. &#x60;field1,field2&#x60;.  For each field that you want to update, provide a corresponding value in the record object containing the new value.
   * @return updateMask
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of fields to be updated, separated by a comma, e.g. `field1,field2`.  For each field that you want to update, provide a corresponding value in the record object containing the new value.")

  public String getUpdateMask() {
    return updateMask;
  }


  public void setUpdateMask(String updateMask) {
    this.updateMask = updateMask;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateRecordRequest updateRecordRequest = (UpdateRecordRequest) o;
    return Objects.equals(this.key, updateRecordRequest.key) &&
        Objects.equals(this.record, updateRecordRequest.record) &&
        Objects.equals(this.updateMask, updateRecordRequest.updateMask);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, record, updateMask);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateRecordRequest {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    updateMask: ").append(toIndentedString(updateMask)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

