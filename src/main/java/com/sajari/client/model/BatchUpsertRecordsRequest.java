/*
 * Sajari API
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@sajari.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sajari.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * BatchUpsertRecordsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BatchUpsertRecordsRequest {
    public static final String SERIALIZED_NAME_PIPELINE = "pipeline";
    @SerializedName(SERIALIZED_NAME_PIPELINE)
    private BatchUpsertRecordsRequestPipeline pipeline;

    public static final String SERIALIZED_NAME_RECORDS = "records";
    @SerializedName(SERIALIZED_NAME_RECORDS)
    private java.util.List<Object> records = new java.util.ArrayList<>();

    public static final String SERIALIZED_NAME_VARIABLES = "variables";
    @SerializedName(SERIALIZED_NAME_VARIABLES)
    private Object variables;


    public BatchUpsertRecordsRequest pipeline(BatchUpsertRecordsRequestPipeline pipeline) {

        this.pipeline = pipeline;
        return this;
    }

    /**
     * Get pipeline
     *
     * @return pipeline
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")

    public BatchUpsertRecordsRequestPipeline getPipeline() {
        return pipeline;
    }


    public void setPipeline(BatchUpsertRecordsRequestPipeline pipeline) {
        this.pipeline = pipeline;
    }


    public BatchUpsertRecordsRequest records(java.util.List<Object> records) {

        this.records = records;
        return this;
    }

    public BatchUpsertRecordsRequest addRecordsItem(Object recordsItem) {
        this.records.add(recordsItem);
        return this;
    }

    /**
     * A list of records to upsert.
     *
     * @return records
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "A list of records to upsert.")

    public java.util.List<Object> getRecords() {
        return records;
    }


    public void setRecords(java.util.List<Object> records) {
        this.records = records;
    }


    public BatchUpsertRecordsRequest variables(Object variables) {

        this.variables = variables;
        return this;
    }

    /**
     * The initial values for the variables the pipeline operates on and transforms throughout its steps.
     *
     * @return variables
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The initial values for the variables the pipeline operates on and transforms throughout its steps.")

    public Object getVariables() {
        return variables;
    }


    public void setVariables(Object variables) {
        this.variables = variables;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BatchUpsertRecordsRequest batchUpsertRecordsRequest = (BatchUpsertRecordsRequest) o;
        return Objects.equals(this.pipeline, batchUpsertRecordsRequest.pipeline) &&
                Objects.equals(this.records, batchUpsertRecordsRequest.records) &&
                Objects.equals(this.variables, batchUpsertRecordsRequest.variables);
    }

    @Override
    public int hashCode() {
        return Objects.hash(pipeline, records, variables);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class BatchUpsertRecordsRequest {\n");
        sb.append("    pipeline: ").append(toIndentedString(pipeline)).append("\n");
        sb.append("    records: ").append(toIndentedString(records)).append("\n");
        sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

