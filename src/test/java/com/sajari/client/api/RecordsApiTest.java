/*
 * Sajari API
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@sajari.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sajari.client.api;

import com.sajari.client.ApiException;
import com.sajari.client.model.*;
import org.junit.Test;
import org.junit.Ignore;


/**
 * API tests for RecordsApi
 */
@Ignore
public class RecordsApiTest {

    private final RecordsApi api = new RecordsApi();

    
    /**
     * Batch upsert records
     *
     * The batch version of the [UpsertRecord](/docs/api-reference#operation/UpsertRecord) call.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void batchUpsertRecordsTest() throws ApiException {
        String collectionId = null;
        BatchUpsertRecordsRequest batchUpsertRecordsRequest = null;
        BatchUpsertRecordsResponse response = api.batchUpsertRecords(collectionId, batchUpsertRecordsRequest);

        // TODO: test validations
    }
    
    /**
     * Delete record
     *
     * Delete a record with the given key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRecordTest() throws ApiException {
        String collectionId = null;
        DeleteRecordRequest deleteRecordRequest = null;
        Object response = api.deleteRecord(collectionId, deleteRecordRequest);

        // TODO: test validations
    }
    
    /**
     * Get record
     *
     * Retrieve a record with the given key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordTest() throws ApiException {
        String collectionId = null;
        GetRecordRequest getRecordRequest = null;
        Object response = api.getRecord(collectionId, getRecordRequest);

        // TODO: test validations
    }
    
    /**
     * Upsert record
     *
     * If the record does not exist in your collection it is inserted. If it does exist it is updated.  If no pipeline is specified, the default record pipeline is used to process the record.  For example, to add a single product from your ecommerce store to a collection, use the following call:  &#x60;&#x60;&#x60;json {   \&quot;pipeline\&quot;: {     \&quot;name\&quot;: \&quot;my-pipeline\&quot;,     \&quot;version\&quot;: \&quot;1\&quot;   },   \&quot;record\&quot;: {     \&quot;id\&quot;: \&quot;54hdc7h2334h\&quot;,     \&quot;name\&quot;: \&quot;Smart TV\&quot;,     \&quot;price\&quot;: 1999,     \&quot;brand\&quot;: \&quot;Acme\&quot;,     \&quot;description\&quot;: \&quot;...\&quot;,     \&quot;in_stock\&quot;: true   } } &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertRecordTest() throws ApiException {
        String collectionId = null;
        UpsertRecordRequest upsertRecordRequest = null;
        UpsertRecordResponse response = api.upsertRecord(collectionId, upsertRecordRequest);

        // TODO: test validations
    }
    
}
